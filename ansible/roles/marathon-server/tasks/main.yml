---

  - name: Create host independent directories which need to exist, if necessary
    file: path={{item}} state=directory owner=root
    with_items:
      - /etc/marathon/conf
    become: yes
    tags:
      - marathon

  - name: Add Mesosphere repository key to local keychain
    apt_key: keyserver=keyserver.ubuntu.com id=E56151BF
    become: yes
    tags:
      - packages
      - marathon

  - name: Add Mesosphere repository to apt sources list
    apt_repository: repo='deb http://repos.mesosphere.io/ubuntu trusty main' state=present update_cache=yes
    become: yes
    tags:
      - packages
      - marathon

  - name: Update package repo cache
    apt: update_cache=yes
    become: yes
    tags:
      - marathon
      - packages
      - update_cache

  - name: Install marathon dependencies
    apt: name={{ item }} state=present
    with_items: "{{ marathon_package_deps }}"
    become: yes
    tags:
      - packages
      - marathon

  - name: Install the Marathon package
    apt: name="marathon={{ marathon_version }}" state=present
    become: yes
    notify: restart marathon
    tags:
      - packages
      - marathon

  - name: Remove old marathon dependencies
    apt: name={{ item }} state=absent
    with_items: "{{ old_marathon_package_deps }}"
    become: yes
    tags:
      - packages
      - marathon

  - name: Configure marathon commandline flags
    template: src=marathon-flags/{{item}}.j2 dest=/etc/marathon/conf/{{item}} owner=root group=root mode=0644
    with_items: "{{ marathon_args_files }}"
    become: yes
    notify: restart marathon
    tags:
      - marathon

  - name: Download auth plugin
    when: marathon_auth_enable is defined and marathon_auth_enable|bool
    get_url: url={{marathon_auth_plugin_url}} dest={{tmp_dir}}/{{marathon_auth_plugin_pkg}} sha256sum={{marathon_auth_plugin_pkg_sha256}}
    tags:
      - install
      - plugin
      - configuration

  - name: Ensure "{{ marathon_auth_plugin_location }}" dir exists
    when: marathon_auth_enable is defined and marathon_auth_enable|bool
    file: path="{{ marathon_auth_plugin_location }}" state=directory
    become: yes
    tags:
      - install
      - plugin
      - configuration

  - name: Copy auth plugin jars
    when: marathon_auth_enable is defined and marathon_auth_enable|bool
    unarchive: copy=no dest="{{ marathon_auth_plugin_location }}" src="{{ tmp_dir }}/{{ marathon_auth_plugin_pkg }}"
    become: yes
    tags:
      - install
      - plugin
      - configuration

  - name: Create a temp dir for local permissions file and oauth file when marathon_auth_permissions_gspreadsheets is true or for nginx basic auth
    when: ( marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_gspreadsheets is defined and not(marathon_auth_permissions_gspreadsheets | trim == '') ) or nginx_proxy_enable
    local_action: shell mktemp -d
    always_run: yes # run during check mode
    run_once: yes
    register: mktemp
    notify: clean mktemp
    tags:
      - configuration
      - plugin
      - permissions
      - permissions-sync
      - permissions-gen

  - debug: msg="Created a temp dir. If the playbook fails, please delete this directory using -> rm -r {{ mktemp.stdout }}"
    when: marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_gspreadsheets is defined and not(marathon_auth_permissions_gspreadsheets | trim == '')
    always_run: yes # run during check mode
    run_once: yes
    tags:
      - configuration
      - plugin
      - permissions
      - permissions-sync
      - permissions-gen

  - name: Generate oauth file from template when marathon_auth_permissions_gspreadsheets is true
    when: marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_gspreadsheets is defined and not(marathon_auth_permissions_gspreadsheets | trim == '')
    local_action: template src=oauth.j2 dest="{{ mktemp.stdout }}/oauth" mode=0600
    always_run: yes # run during check mode
    run_once: yes
    notify: clean mktemp
    tags:
      - configuration
      - plugin
      - permissions
      - permissions-sync
      - permissions-gen

  - name: Generate permissions file from google spreadsheets when marathon_auth_permissions_gspreadsheets is true
    when: marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_gspreadsheets is defined and not(marathon_auth_permissions_gspreadsheets | trim == '')
    local_action: shell python {{ role_path }}/files/generate_user_permissions.py -f "{{ mktemp.stdout }}/oauth" -p {{ marathon_auth_password_column }} -o "{{ mktemp.stdout }}/permissions.json"
        {%- for sheet in marathon_auth_permissions_gspreadsheets.split(';') %} -ss "{{ sheet }}" {% endfor -%}
    always_run: yes # run during check mode
    run_once: yes
    tags:
      - configuration
      - plugin
      - permissions
      - permissions-sync
      - permissions-gen

  - name: Copy generated permissions file from google spreadsheets when marathon_auth_permissions_gspreadsheets is true
    when: marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_gspreadsheets is defined and not(marathon_auth_permissions_gspreadsheets | trim == '')
    copy: src="{{ mktemp.stdout }}/permissions.json" dest="{{ marathon_auth_plugin_location }}/user-permissions.json" owner=root group=root mode=0644
    become: yes
    tags:
      - configuration
      - plugin
      - permissions
      - permissions-sync
      - permissions-gen


  - name: Copy permissions file from local src when marathon_auth_permissions_local_path is defined
    when: marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_local_path is defined and not(marathon_auth_permissions_local_path | trim == '')
    copy:  src="{{ marathon_auth_permissions_local_path }}"  dest="{{ marathon_auth_plugin_location }}/user-permissions.json" owner=root group=root mode=0644
    become: yes
    tags:
      - configuration
      - plugin
      - permissions
      - permissions-sync

  - name: Copy default marathon user-permissions.json file if neither local path nor marathon_auth_permissions_gspreadsheets are defined, and there isn't already a permissions file
    when: marathon_auth_enable is defined and marathon_auth_enable|bool and
          marathon_auth_permissions_local_path is not defined and
          marathon_auth_permissions_gspreadsheets is not defined
    copy: src=user-permissions.json.j2 dest="{{ marathon_auth_plugin_location }}/user-permissions.json" owner=root group=root mode=0644
          force=no # ensure that this file doesn't overwrite any existing permissions file
    become: yes
    tags:
      - configuration
      - plugin
      - permissions

  - name: Copy marathon plugin configuration file
    when: marathon_auth_enable is defined and marathon_auth_enable|bool
    template: src=marathon-plugin.conf.j2 dest="{{ base_data_dir }}/marathon/marathon-plugin.conf" owner=root group=root mode=0644
    become: yes
    tags:
      - configuration
      - plugin

  - name: Configure marathon auth commandline flags
    when: marathon_auth_enable is defined and marathon_auth_enable|bool
    template: src=marathon-auth-flags/{{item}}.j2 dest=/etc/marathon/conf/{{item}} owner=root group=root mode=0644
    with_items: "{{ marathon_auth_args_files }}"
    become: yes
    notify: restart marathon
    tags:
      - marathon
      - plugin
      - permissions

  - name: Remove marathon auth commandline flags when marathon_auth_enable is false
    when: marathon_auth_enable is not defined or not marathon_auth_enable|bool
    file: path="/etc/marathon/conf/{{item}}" state=absent
    with_items: "{{ marathon_auth_args_files }}"
    become: yes
    notify: restart marathon
    tags:
      - marathon
      - plugin
      - permissions

  - name: Remove plugin  when marathon_auth_enable is false
    when: marathon_auth_enable is not defined or not marathon_auth_enable|bool
    file: path="{{ marathon_auth_plugin_location }}" state=absent  # WARNING: deleting the plugin directory.. should NOT do this if there are many plugins
    become: yes
    tags:
      - install
      - plugin
      - configuration

  - name: Configure marathon upstart job
    template: src=marathon.conf.j2 dest=/etc/init/marathon.conf owner=root group=root mode=0600
    become: yes
    notify: restart marathon
    tags:
      - marathon


  - name: Download nginx release
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    get_url: url="{{nginx_release_url}}" dest="{{tmp_dir}}"
    become: yes
    tags:
      - install
      - nginx 

  - name: try to stop nginx proxy if it is already running
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    command: /usr/local/nginx/sbin/nginx -s stop
    become: yes
    ignore_errors: yes
    tags:
      - nginx 

  - name: Untar nginx package
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    unarchive: copy=no dest="{{tmp_dir}}" src="{{tmp_dir}}/{{nginx_pkg_tar}}"
    become: yes
    tags:
      - install
      - nginx 

  - name: Install nginx dependencies
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    apt: name={{ item }} state=present
    with_items: "{{ nginx_package_deps }}"
    become: yes
    tags:
      - packages
      - nginx

  - name: configure and install nginx with auth_request module
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    command: chdir={{tmp_dir}}/{{nginx_pkg}} {{item}}
    with_items:
      - ./configure --with-http_auth_request_module 
      - make 
      - make install
    become: yes
    tags:
      - install
      - nginx 

  - name: Remove the old basic auth file if it already exists
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    file: path={{mktemp.stdout}}/{{nginx_basic_auth_file_name}} state=absent
    become: yes
    tags:
      - install
      - nginx 

  - name: Fail if nginx proxy is enabled but permissions file path is not defined
    fail: msg="basic auth file for nginx can't be generated without permissions file locally, define - marathon_auth_permissions_local_path"
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool and marathon_auth_permissions_local_path is not defined or marathon_auth_permissions_local_path | trim == ''

  - name: Generate nginx basic auth file if nginx_proxy_enable is set && it requires permissions file locally
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool and
          marathon_auth_permissions_local_path is defined and not(marathon_auth_permissions_local_path | trim == '')
    local_action: shell python {{ role_path }}/files/generate_nginx_basic_auth_file.py {{marathon_auth_permissions_local_path}} {{mktemp.stdout}}/{{nginx_basic_auth_file_name}}
    always_run: yes # run during check mode
    run_once: yes
    tags:
      - configuration
      - nginx 

  - name: Copy basic auth credentials file to the nginx conf
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    copy: src={{mktemp.stdout}}/{{nginx_basic_auth_file_name}} dest="{{nginx_conf_dir}}/{{nginx_basic_auth_file_name}}"  mode=0644
    become: yes
    tags:
      - install
      - nginx 

  - name: Copy AAA daemon to nginx conf directory for now
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    copy: src=aaad dest={{nginx_conf_dir}}  mode=0655
    become: yes
    tags:
      - install
      - nginx 

  - name: Configure aaad upstart job
    template: src=aaad.conf.j2 dest=/etc/init/aaad.conf owner=root group=root mode=0600
    become: yes
    notify: start aaad
    tags:
      - nginx
      - aaa daemon


  - name: create directory to put different sites config
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    file: path="{{nginx_conf_dir}}/sites-available" state=directory
    become: yes
    tags:
      - install
      - nginx 

  - name: create a directory to hold symlink to the default site config
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    file: path="{{nginx_conf_dir}}/sites-enabled"   state=directory 
    become: yes
    tags:
      - install
      - nginx 

  - name: copy proxy config to sites-available
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    template: src=rogeros_auth_proxy.conf.j2 dest="{{nginx_conf_dir}}/sites-available" mode=0644
    become: yes
    tags:
      - install
      - nginx 

  - name: symlink proxy config to default site
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    file: src="{{nginx_conf_dir}}/sites-available/rogeros_auth_proxy.conf" dest="{{nginx_conf_dir}}/sites-enabled/default" state=link
    become: yes
    tags:
      - install
      - nginx 

  - name: copy nginx conf file
    template: src=nginx.conf.j2 dest={{nginx_conf_dir}}/nginx.conf  mode=0644
    become: yes
    tags:
      - install
      - nginx

  - name: start nginx proxy for rogeros auth 
    when: nginx_proxy_enable is defined and nginx_proxy_enable|bool
    command: /usr/local/nginx/sbin/nginx 
    become: yes
    tags:
      - nginx 

